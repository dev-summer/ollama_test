name: Code Review
on: pull_request
jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install transformers torch requests

      - name: Run Code Review with Hugging Face Model
        id: review_code
        run: |
          python3 << 'EOL'
          from transformers import pipeline
          
          # Define review prompt directly here
          prompt = """You are an expert iOS developer specializing in both SwiftUI and UIKit, with extensive experience in code review and deep understanding of iOS best practices, design patterns, and modern development standards. Your task is to thoroughly analyze the following Pull Request (PR) diff and provide a comprehensive, professional code review.

          Please review focusing on these key areas:

          1. SwiftUI and UIKit Integration
          - Usage of UIViewRepresentable and UIViewControllerRepresentable
          - State management between SwiftUI and UIKit
          - Potential memory leaks in bridging layers
          - View lifecycle handling
          - Environment object and state variable usage

          2. Code Quality and Readability
          - Check for unused variables, properties, methods, imports
          - Naming conventions following Swift API Design Guidelines
          - Property wrapper usage (@State, @Binding, @ObservedObject)
          - Complex View bodies needing refactoring

          3. Swift and iOS Best Practices
          - Combine publishers and subscribers implementation
          - Async/await usage
          - Memory management
          - SwiftUI view modifier order
          - Dependency injection
          - Error handling

          4. Performance Considerations
          - View redraw issues
          - List and ForEach usage
          - State management efficiency
          - Main thread operations
          - Image loading and caching

          5. Architecture and Patterns
          - MVVM implementation
          - Data flow patterns
          - Single responsibility principle
          - UI and business logic separation

          6. Potential Bugs
          - Memory leaks in closures
          - State updates
          - Race conditions
          - NavigationStack usage
          - Sheet and full-screen cover handling

          Please provide your review in this format:

          SUMMARY:
          Brief description of the changes and their purpose.

          CRITICAL ISSUES:
          List any issues that must be fixed before approval.
          Include file name, line number, current code, and suggested fix.

          IMPROVEMENTS NEEDED:
          List non-critical issues that should be addressed.
          Include file name, line number, and suggested changes.

          MINOR SUGGESTIONS:
          Quick fixes and style improvements.

          REVIEW RESULT:
          Either: Approved, Approved with minor comments, or Changes requested

          Code to review:
          """
          
          # Get the diff
          diff = """${{ steps.get_diff.outputs.diff }}"""
          
          # Initialize model
          review_model = pipeline("text-generation", model="Qwen/Qwen2.5-Coder-7B-Instruct")
          
          # Generate review
          full_prompt = f"{prompt}\n```\n{diff}\n```"
          review_comment = review_model(
              full_prompt,
              max_length=2000,
              num_return_sequences=1,
              temperature=0.7
          )[0]['generated_text']
          
          # Save review
          with open("review_comment.txt", "w") as file:
              file.write(review_comment)
          EOL

      - name: Add comment to Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('review_comment.txt', 'utf-8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            })
