name: Code Review
on: pull_request
permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Add cache for pip
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Add cache for model files
      - name: Cache model files
        uses: actions/cache@v3
        id: model-cache
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-model-qwen25-3b-${{ hashFiles('code_review.py') }}
          restore-keys: |
            ${{ runner.os }}-model-qwen25-3b-
            ${{ runner.os }}-model-

      - name: Get Common Ancestor
        id: first_commit
        run: |
          common_ancestor=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "sha=$common_ancestor" >> $GITHUB_OUTPUT
        shell: bash

      - name: Generate Diff
        id: git_diff
        run: |
          git diff --merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- . > diff.txt
          echo "stats<<EOF" >> $GITHUB_OUTPUT
          git diff --stat --merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- . >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          git diff --name-only --merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- . >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Load Diff Content
        id: print_diff
        run: |
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          cat diff.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch transformers
          pip install accelerate

      - name: Generate Code Review
        id: review_generation
        timeout-minutes: 10  # Add timeout to prevent hanging
        run: |
          python3 code_review.py
        env:
          DIFF_CONTENT: "${{ steps.print_diff.outputs.diff }}"
          CHANGED_FILES: "${{ steps.git_diff.outputs.changed_files }}"
          MAX_TOKENS: "2000"
          TEMPERATURE: "0.7"
          HUGGINGFACE_HUB_CACHE: "~/.cache/huggingface"  # Specify cache location

      # Post each review comment
      - name: Post Architecture Review Comment
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('review_comment_1.txt', 'utf-8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });

      - name: Post UI Review Comment
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('review_comment_2.txt', 'utf-8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });

      - name: Post Technical Review Comment
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('review_comment_3.txt', 'utf-8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });
