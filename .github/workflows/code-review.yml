name: Code Review
on: [pull_request, open]
permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get PR Diff
        id: get_diff
        shell: bash
        env:
          PULL_REQUEST_HEAD_REF: "${{ github.event.pull_request.head.ref }}"
        run: |
          base_ref="${{ github.event.pull_request.base.ref }}"
          head_ref="${{ github.event.pull_request.head.ref }}"
          git fetch origin "refs/heads/$base_ref:refs/remotes/origin/$base_ref"
          git fetch origin "refs/heads/$head_ref:refs/remotes/origin/$head_ref"
          git diff "origin/$base_ref...origin/$head_ref" > "diff.txt"
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          cat "diff.txt" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Load Review Prompt
        id: load_prompt
        run: |
          echo "prompt<<EOF" >> $GITHUB_OUTPUT
          cat review_prompt.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install transformers torch requests

      - name: Run Code Review with Hugging Face Model
        id: review_code
        run: |
          python3 << 'EOL'
          from transformers import pipeline
          import os
      
          # Get the prompt and diff from environment variables
          # prompt = os.getenv('PROMPT_CONTENT', '')
          prompt = "You are an expert iOS developer. Please review the changes made in this PR."
          diff = os.getenv('DIFF_CONTENT', '')
      
          # Log the contents of prompt and diff for debugging
          print(f"Prompt content: {prompt[:100]}")  # Log first 100 characters for brevity
          print(f"Diff content: {diff[:100]}")  # Log first 100 characters for brevity
      
          # Initialize the model pipeline
          review_model = pipeline("text-generation", model="Qwen/Qwen2.5-Coder-1.5B-Instruct", return_full_text=False)
      
          # Construct the full prompt
          full_prompt = f"{prompt}\n```\n{diff}\n```"
          
          try:
              # Generate review comment
              review_comment = review_model(
                  full_prompt,
                  max_new_tokens=512,  # Adjusted to a reasonable value
                  num_return_sequences=1,
                  temperature=0.7
              )[0]['generated_text']
              
              # Check if review_comment is empty or whitespace
              if review_comment.strip():
                  # Save the generated review to file
                  with open("review_comment.txt", "w") as file:
                      file.write(review_comment)
                  print("Review comment generated successfully.")
              else:
                  print("Generated review comment is empty.")
                  exit(1)  # Exit with error code if the comment is empty
      
          except Exception as e:
              print(f"Error during model generation or file writing: {e}")
              exit(1)  # Exit with error code if an exception occurs
      
          EOL
        env:
          PROMPT_CONTENT: ${{ steps.load_prompt.outputs.prompt }}
          DIFF_CONTENT: ${{ steps.get_diff.outputs.diff }}

      - name: Check and Log Review Comment
        run: |
          if [[ -s "review_comment.txt" ]]; then
            echo "Review comment file has content:"
            cat review_comment.txt
          else
            echo "Review comment file is empty."
            exit 1
          fi
      
      
            - name: Add comment to Pull Request
              uses: actions/github-script@v6
              with:
                script: |
                  const fs = require('fs');
                  const comment = fs.readFileSync('review_comment.txt', 'utf-8');
                  github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.pull_request.number,
                    body: comment
                  })
