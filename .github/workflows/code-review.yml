name: Code Review
on: pull_request
permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for accurate merge-base calculation
      
      # Step 2: Get diff using merge-base
      - name: Get Common Ancestor
        id: first_commit
        run: |
          # Find the common ancestor of the base branch and the head branch
          common_ancestor=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "sha=$common_ancestor" >> $GITHUB_OUTPUT
        shell: bash

      - name: Generate Diff
        id: git_diff
        run: |
          # Generate diff from merge-base to head
          git diff --merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- . > diff.txt
          
          # Save diff statistics
          echo "stats<<EOF" >> $GITHUB_OUTPUT
          git diff --stat --merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- . >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Save changed files list
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          git diff --name-only --merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- . >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Load Diff Content
        id: print_diff
        run: |
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          cat diff.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      # Step 3: Load review prompt
      - name: Load Review Prompt
        id: load_prompt
        run: |
          echo "prompt<<EOF" >> $GITHUB_OUTPUT
          cat review_prompt.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 4: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      # Step 5: Install Python dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install transformers torch requests

      # Step 6: Generate code review
      - name: Generate Code Review
        id: review_generation
        run: |
          python3 code_review.py
        env:
          PROMPT_CONTENT: "${{ steps.load_prompt.outputs.prompt }}"
          DIFF_CONTENT: "${{ steps.print_diff.outputs.diff }}"
          CHANGED_FILES: "${{ steps.git_diff.outputs.changed_files }}"
          MODEL_NAME: "Qwen/Qwen2.5-Coder-1.5B-Instruct"
          MAX_TOKENS: "4000"
          TEMPERATURE: "0.7"

      # Step 7: Post review comment
      - name: Post Review Comment
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('review_comment.txt', 'utf-8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });
